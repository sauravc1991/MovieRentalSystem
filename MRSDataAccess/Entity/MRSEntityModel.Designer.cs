//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.ComponentModel;
using System.Data.EntityClient;
using System.Data.Objects;
using System.Data.Objects.DataClasses;
using System.Linq;
using System.Runtime.Serialization;
using System.Xml.Serialization;

[assembly: EdmSchemaAttribute()]
#region EDM Relationship Metadata

[assembly: EdmRelationshipAttribute("MovieRentalSystemModel", "FK_MovieInformation2", "Genre", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(MRSDataAccess.Entity.Genre), "MovieInformation", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(MRSDataAccess.Entity.MovieInformation), true)]
[assembly: EdmRelationshipAttribute("MovieRentalSystemModel", "FK_MovieInformation1", "Language", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(MRSDataAccess.Entity.Language), "MovieInformation", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(MRSDataAccess.Entity.MovieInformation), true)]
[assembly: EdmRelationshipAttribute("MovieRentalSystemModel", "FK_MovieTransact2", "MovieInformation", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(MRSDataAccess.Entity.MovieInformation), "MovieTransact", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(MRSDataAccess.Entity.MovieTransact), true)]
[assembly: EdmRelationshipAttribute("MovieRentalSystemModel", "FK_MovieTransact1", "User", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(MRSDataAccess.Entity.User), "MovieTransact", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(MRSDataAccess.Entity.MovieTransact), true)]
[assembly: EdmRelationshipAttribute("MovieRentalSystemModel", "FK_User1", "Role", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(MRSDataAccess.Entity.Role), "User", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(MRSDataAccess.Entity.User), true)]

#endregion

namespace MRSDataAccess.Entity
{
    #region Contexts
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    public partial class MovieRentalSystemEntities : ObjectContext
    {
        #region Constructors
    
        /// <summary>
        /// Initializes a new MovieRentalSystemEntities object using the connection string found in the 'MovieRentalSystemEntities' section of the application configuration file.
        /// </summary>
        public MovieRentalSystemEntities() : base("name=MovieRentalSystemEntities", "MovieRentalSystemEntities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        /// <summary>
        /// Initialize a new MovieRentalSystemEntities object.
        /// </summary>
        public MovieRentalSystemEntities(string connectionString) : base(connectionString, "MovieRentalSystemEntities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        /// <summary>
        /// Initialize a new MovieRentalSystemEntities object.
        /// </summary>
        public MovieRentalSystemEntities(EntityConnection connection) : base(connection, "MovieRentalSystemEntities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        #endregion
    
        #region Partial Methods
    
        partial void OnContextCreated();
    
        #endregion
    
        #region ObjectSet Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Genre> Genres
        {
            get
            {
                if ((_Genres == null))
                {
                    _Genres = base.CreateObjectSet<Genre>("Genres");
                }
                return _Genres;
            }
        }
        private ObjectSet<Genre> _Genres;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Language> Languages
        {
            get
            {
                if ((_Languages == null))
                {
                    _Languages = base.CreateObjectSet<Language>("Languages");
                }
                return _Languages;
            }
        }
        private ObjectSet<Language> _Languages;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<MovieInformation> MovieInformations
        {
            get
            {
                if ((_MovieInformations == null))
                {
                    _MovieInformations = base.CreateObjectSet<MovieInformation>("MovieInformations");
                }
                return _MovieInformations;
            }
        }
        private ObjectSet<MovieInformation> _MovieInformations;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<MovieTransact> MovieTransacts
        {
            get
            {
                if ((_MovieTransacts == null))
                {
                    _MovieTransacts = base.CreateObjectSet<MovieTransact>("MovieTransacts");
                }
                return _MovieTransacts;
            }
        }
        private ObjectSet<MovieTransact> _MovieTransacts;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Role> Roles
        {
            get
            {
                if ((_Roles == null))
                {
                    _Roles = base.CreateObjectSet<Role>("Roles");
                }
                return _Roles;
            }
        }
        private ObjectSet<Role> _Roles;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<sysdiagram> sysdiagrams
        {
            get
            {
                if ((_sysdiagrams == null))
                {
                    _sysdiagrams = base.CreateObjectSet<sysdiagram>("sysdiagrams");
                }
                return _sysdiagrams;
            }
        }
        private ObjectSet<sysdiagram> _sysdiagrams;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<User> Users
        {
            get
            {
                if ((_Users == null))
                {
                    _Users = base.CreateObjectSet<User>("Users");
                }
                return _Users;
            }
        }
        private ObjectSet<User> _Users;

        #endregion

        #region AddTo Methods
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Genres EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToGenres(Genre genre)
        {
            base.AddObject("Genres", genre);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Languages EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToLanguages(Language language)
        {
            base.AddObject("Languages", language);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the MovieInformations EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToMovieInformations(MovieInformation movieInformation)
        {
            base.AddObject("MovieInformations", movieInformation);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the MovieTransacts EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToMovieTransacts(MovieTransact movieTransact)
        {
            base.AddObject("MovieTransacts", movieTransact);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Roles EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToRoles(Role role)
        {
            base.AddObject("Roles", role);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the sysdiagrams EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddTosysdiagrams(sysdiagram sysdiagram)
        {
            base.AddObject("sysdiagrams", sysdiagram);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Users EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToUsers(User user)
        {
            base.AddObject("Users", user);
        }

        #endregion

        #region Function Imports
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="roleID">No Metadata Documentation available.</param>
        /// <param name="name">No Metadata Documentation available.</param>
        /// <param name="userName">No Metadata Documentation available.</param>
        /// <param name="password">No Metadata Documentation available.</param>
        /// <param name="phone">No Metadata Documentation available.</param>
        /// <param name="email">No Metadata Documentation available.</param>
        /// <param name="address">No Metadata Documentation available.</param>
        public int InsertUser(Nullable<global::System.Int32> roleID, global::System.String name, global::System.String userName, global::System.String password, global::System.String phone, global::System.String email, global::System.String address)
        {
            ObjectParameter roleIDParameter;
            if (roleID.HasValue)
            {
                roleIDParameter = new ObjectParameter("RoleID", roleID);
            }
            else
            {
                roleIDParameter = new ObjectParameter("RoleID", typeof(global::System.Int32));
            }
    
            ObjectParameter nameParameter;
            if (name != null)
            {
                nameParameter = new ObjectParameter("Name", name);
            }
            else
            {
                nameParameter = new ObjectParameter("Name", typeof(global::System.String));
            }
    
            ObjectParameter userNameParameter;
            if (userName != null)
            {
                userNameParameter = new ObjectParameter("UserName", userName);
            }
            else
            {
                userNameParameter = new ObjectParameter("UserName", typeof(global::System.String));
            }
    
            ObjectParameter passwordParameter;
            if (password != null)
            {
                passwordParameter = new ObjectParameter("Password", password);
            }
            else
            {
                passwordParameter = new ObjectParameter("Password", typeof(global::System.String));
            }
    
            ObjectParameter phoneParameter;
            if (phone != null)
            {
                phoneParameter = new ObjectParameter("Phone", phone);
            }
            else
            {
                phoneParameter = new ObjectParameter("Phone", typeof(global::System.String));
            }
    
            ObjectParameter emailParameter;
            if (email != null)
            {
                emailParameter = new ObjectParameter("Email", email);
            }
            else
            {
                emailParameter = new ObjectParameter("Email", typeof(global::System.String));
            }
    
            ObjectParameter addressParameter;
            if (address != null)
            {
                addressParameter = new ObjectParameter("Address", address);
            }
            else
            {
                addressParameter = new ObjectParameter("Address", typeof(global::System.String));
            }
    
            return base.ExecuteFunction("InsertUser", roleIDParameter, nameParameter, userNameParameter, passwordParameter, phoneParameter, emailParameter, addressParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectResult<spTopTen_Result> spTopTen()
        {
            return base.ExecuteFunction<spTopTen_Result>("spTopTen");
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="username">No Metadata Documentation available.</param>
        /// <param name="uPassword">No Metadata Documentation available.</param>
        /// <param name="outRoleId">No Metadata Documentation available.</param>
        /// <param name="outUName">No Metadata Documentation available.</param>
        /// <param name="outUserID">No Metadata Documentation available.</param>
        public int AuthenticateUser(global::System.String username, global::System.String uPassword, ObjectParameter outRoleId, ObjectParameter outUName, ObjectParameter outUserID)
        {
            ObjectParameter usernameParameter;
            if (username != null)
            {
                usernameParameter = new ObjectParameter("Username", username);
            }
            else
            {
                usernameParameter = new ObjectParameter("Username", typeof(global::System.String));
            }
    
            ObjectParameter uPasswordParameter;
            if (uPassword != null)
            {
                uPasswordParameter = new ObjectParameter("UPassword", uPassword);
            }
            else
            {
                uPasswordParameter = new ObjectParameter("UPassword", typeof(global::System.String));
            }
    
            return base.ExecuteFunction("AuthenticateUser", usernameParameter, uPasswordParameter, outRoleId, outUName, outUserID);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="uID">No Metadata Documentation available.</param>
        /// <param name="outUsername">No Metadata Documentation available.</param>
        /// <param name="outName">No Metadata Documentation available.</param>
        /// <param name="outPhone">No Metadata Documentation available.</param>
        /// <param name="outEmail">No Metadata Documentation available.</param>
        /// <param name="outAddress">No Metadata Documentation available.</param>
        public int UserViewProfile(Nullable<global::System.Int32> uID, ObjectParameter outUsername, ObjectParameter outName, ObjectParameter outPhone, ObjectParameter outEmail, ObjectParameter outAddress)
        {
            ObjectParameter uIDParameter;
            if (uID.HasValue)
            {
                uIDParameter = new ObjectParameter("UID", uID);
            }
            else
            {
                uIDParameter = new ObjectParameter("UID", typeof(global::System.Int32));
            }
    
            return base.ExecuteFunction("UserViewProfile", uIDParameter, outUsername, outName, outPhone, outEmail, outAddress);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="uID">No Metadata Documentation available.</param>
        /// <param name="password">No Metadata Documentation available.</param>
        public int ChangePassword(Nullable<global::System.Int32> uID, global::System.String password)
        {
            ObjectParameter uIDParameter;
            if (uID.HasValue)
            {
                uIDParameter = new ObjectParameter("UID", uID);
            }
            else
            {
                uIDParameter = new ObjectParameter("UID", typeof(global::System.Int32));
            }
    
            ObjectParameter passwordParameter;
            if (password != null)
            {
                passwordParameter = new ObjectParameter("Password", password);
            }
            else
            {
                passwordParameter = new ObjectParameter("Password", typeof(global::System.String));
            }
    
            return base.ExecuteFunction("ChangePassword", uIDParameter, passwordParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="movieid">No Metadata Documentation available.</param>
        /// <param name="languageid">No Metadata Documentation available.</param>
        /// <param name="genreid">No Metadata Documentation available.</param>
        /// <param name="moviename">No Metadata Documentation available.</param>
        /// <param name="rating">No Metadata Documentation available.</param>
        /// <param name="price">No Metadata Documentation available.</param>
        /// <param name="stock">No Metadata Documentation available.</param>
        /// <param name="description">No Metadata Documentation available.</param>
        /// <param name="status">No Metadata Documentation available.</param>
        public int InsertMovie(Nullable<global::System.Int32> movieid, Nullable<global::System.Int32> languageid, Nullable<global::System.Int32> genreid, global::System.String moviename, Nullable<global::System.Int32> rating, Nullable<global::System.Double> price, Nullable<global::System.Int32> stock, global::System.String description, global::System.String status)
        {
            ObjectParameter movieidParameter;
            if (movieid.HasValue)
            {
                movieidParameter = new ObjectParameter("movieid", movieid);
            }
            else
            {
                movieidParameter = new ObjectParameter("movieid", typeof(global::System.Int32));
            }
    
            ObjectParameter languageidParameter;
            if (languageid.HasValue)
            {
                languageidParameter = new ObjectParameter("languageid", languageid);
            }
            else
            {
                languageidParameter = new ObjectParameter("languageid", typeof(global::System.Int32));
            }
    
            ObjectParameter genreidParameter;
            if (genreid.HasValue)
            {
                genreidParameter = new ObjectParameter("genreid", genreid);
            }
            else
            {
                genreidParameter = new ObjectParameter("genreid", typeof(global::System.Int32));
            }
    
            ObjectParameter movienameParameter;
            if (moviename != null)
            {
                movienameParameter = new ObjectParameter("moviename", moviename);
            }
            else
            {
                movienameParameter = new ObjectParameter("moviename", typeof(global::System.String));
            }
    
            ObjectParameter ratingParameter;
            if (rating.HasValue)
            {
                ratingParameter = new ObjectParameter("rating", rating);
            }
            else
            {
                ratingParameter = new ObjectParameter("rating", typeof(global::System.Int32));
            }
    
            ObjectParameter priceParameter;
            if (price.HasValue)
            {
                priceParameter = new ObjectParameter("price", price);
            }
            else
            {
                priceParameter = new ObjectParameter("price", typeof(global::System.Double));
            }
    
            ObjectParameter stockParameter;
            if (stock.HasValue)
            {
                stockParameter = new ObjectParameter("stock", stock);
            }
            else
            {
                stockParameter = new ObjectParameter("stock", typeof(global::System.Int32));
            }
    
            ObjectParameter descriptionParameter;
            if (description != null)
            {
                descriptionParameter = new ObjectParameter("description", description);
            }
            else
            {
                descriptionParameter = new ObjectParameter("description", typeof(global::System.String));
            }
    
            ObjectParameter statusParameter;
            if (status != null)
            {
                statusParameter = new ObjectParameter("status", status);
            }
            else
            {
                statusParameter = new ObjectParameter("status", typeof(global::System.String));
            }
    
            return base.ExecuteFunction("InsertMovie", movieidParameter, languageidParameter, genreidParameter, movienameParameter, ratingParameter, priceParameter, stockParameter, descriptionParameter, statusParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mid">No Metadata Documentation available.</param>
        public int DeleteMovieByID(Nullable<global::System.Int32> mid)
        {
            ObjectParameter midParameter;
            if (mid.HasValue)
            {
                midParameter = new ObjectParameter("mid", mid);
            }
            else
            {
                midParameter = new ObjectParameter("mid", typeof(global::System.Int32));
            }
    
            return base.ExecuteFunction("DeleteMovieByID", midParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="gid">No Metadata Documentation available.</param>
        public int DeleteGenreByID(Nullable<global::System.Int32> gid)
        {
            ObjectParameter gidParameter;
            if (gid.HasValue)
            {
                gidParameter = new ObjectParameter("gid", gid);
            }
            else
            {
                gidParameter = new ObjectParameter("gid", typeof(global::System.Int32));
            }
    
            return base.ExecuteFunction("DeleteGenreByID", gidParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="lid">No Metadata Documentation available.</param>
        public int DeleteLanguageByID(Nullable<global::System.Int32> lid)
        {
            ObjectParameter lidParameter;
            if (lid.HasValue)
            {
                lidParameter = new ObjectParameter("lid", lid);
            }
            else
            {
                lidParameter = new ObjectParameter("lid", typeof(global::System.Int32));
            }
    
            return base.ExecuteFunction("DeleteLanguageByID", lidParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="languageName">No Metadata Documentation available.</param>
        public int InsertLanguage(global::System.String languageName)
        {
            ObjectParameter languageNameParameter;
            if (languageName != null)
            {
                languageNameParameter = new ObjectParameter("languageName", languageName);
            }
            else
            {
                languageNameParameter = new ObjectParameter("languageName", typeof(global::System.String));
            }
    
            return base.ExecuteFunction("InsertLanguage", languageNameParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="genreId">No Metadata Documentation available.</param>
        /// <param name="genreName">No Metadata Documentation available.</param>
        public int InsertGenre(Nullable<global::System.Int32> genreId, global::System.String genreName)
        {
            ObjectParameter genreIdParameter;
            if (genreId.HasValue)
            {
                genreIdParameter = new ObjectParameter("genreId", genreId);
            }
            else
            {
                genreIdParameter = new ObjectParameter("genreId", typeof(global::System.Int32));
            }
    
            ObjectParameter genreNameParameter;
            if (genreName != null)
            {
                genreNameParameter = new ObjectParameter("genreName", genreName);
            }
            else
            {
                genreNameParameter = new ObjectParameter("genreName", typeof(global::System.String));
            }
    
            return base.ExecuteFunction("InsertGenre", genreIdParameter, genreNameParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="uid">No Metadata Documentation available.</param>
        /// <param name="count">No Metadata Documentation available.</param>
        public int CountMoviePerUser(Nullable<global::System.Int32> uid, ObjectParameter count)
        {
            ObjectParameter uidParameter;
            if (uid.HasValue)
            {
                uidParameter = new ObjectParameter("uid", uid);
            }
            else
            {
                uidParameter = new ObjectParameter("uid", typeof(global::System.Int32));
            }
    
            return base.ExecuteFunction("CountMoviePerUser", uidParameter, count);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mid">No Metadata Documentation available.</param>
        /// <param name="stock">No Metadata Documentation available.</param>
        public int CheckMovieStock(Nullable<global::System.Int32> mid, ObjectParameter stock)
        {
            ObjectParameter midParameter;
            if (mid.HasValue)
            {
                midParameter = new ObjectParameter("mid", mid);
            }
            else
            {
                midParameter = new ObjectParameter("mid", typeof(global::System.Int32));
            }
    
            return base.ExecuteFunction("CheckMovieStock", midParameter, stock);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="uid">No Metadata Documentation available.</param>
        /// <param name="movieid">No Metadata Documentation available.</param>
        /// <param name="status">No Metadata Documentation available.</param>
        /// <param name="requestID">No Metadata Documentation available.</param>
        public int ReserveMovie(Nullable<global::System.Int32> uid, Nullable<global::System.Int32> movieid, global::System.String status, ObjectParameter requestID)
        {
            ObjectParameter uidParameter;
            if (uid.HasValue)
            {
                uidParameter = new ObjectParameter("uid", uid);
            }
            else
            {
                uidParameter = new ObjectParameter("uid", typeof(global::System.Int32));
            }
    
            ObjectParameter movieidParameter;
            if (movieid.HasValue)
            {
                movieidParameter = new ObjectParameter("movieid", movieid);
            }
            else
            {
                movieidParameter = new ObjectParameter("movieid", typeof(global::System.Int32));
            }
    
            ObjectParameter statusParameter;
            if (status != null)
            {
                statusParameter = new ObjectParameter("status", status);
            }
            else
            {
                statusParameter = new ObjectParameter("status", typeof(global::System.String));
            }
    
            return base.ExecuteFunction("ReserveMovie", uidParameter, movieidParameter, statusParameter, requestID);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="rid">No Metadata Documentation available.</param>
        public int CheckIn(Nullable<global::System.Int32> rid)
        {
            ObjectParameter ridParameter;
            if (rid.HasValue)
            {
                ridParameter = new ObjectParameter("rid", rid);
            }
            else
            {
                ridParameter = new ObjectParameter("rid", typeof(global::System.Int32));
            }
    
            return base.ExecuteFunction("CheckIn", ridParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="rid">No Metadata Documentation available.</param>
        public int CheckOut(Nullable<global::System.Int32> rid)
        {
            ObjectParameter ridParameter;
            if (rid.HasValue)
            {
                ridParameter = new ObjectParameter("rid", rid);
            }
            else
            {
                ridParameter = new ObjectParameter("rid", typeof(global::System.Int32));
            }
    
            return base.ExecuteFunction("CheckOut", ridParameter);
        }

        #endregion

    }

    #endregion

    #region Entities
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="MovieRentalSystemModel", Name="Genre")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Genre : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Genre object.
        /// </summary>
        /// <param name="genreID">Initial value of the GenreID property.</param>
        /// <param name="genreName">Initial value of the GenreName property.</param>
        public static Genre CreateGenre(global::System.Int32 genreID, global::System.String genreName)
        {
            Genre genre = new Genre();
            genre.GenreID = genreID;
            genre.GenreName = genreName;
            return genre;
        }

        #endregion

        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 GenreID
        {
            get
            {
                return _GenreID;
            }
            set
            {
                if (_GenreID != value)
                {
                    OnGenreIDChanging(value);
                    ReportPropertyChanging("GenreID");
                    _GenreID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("GenreID");
                    OnGenreIDChanged();
                }
            }
        }
        private global::System.Int32 _GenreID;
        partial void OnGenreIDChanging(global::System.Int32 value);
        partial void OnGenreIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String GenreName
        {
            get
            {
                return _GenreName;
            }
            set
            {
                OnGenreNameChanging(value);
                ReportPropertyChanging("GenreName");
                _GenreName = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("GenreName");
                OnGenreNameChanged();
            }
        }
        private global::System.String _GenreName;
        partial void OnGenreNameChanging(global::System.String value);
        partial void OnGenreNameChanged();

        #endregion

    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("MovieRentalSystemModel", "FK_MovieInformation2", "MovieInformation")]
        public EntityCollection<MovieInformation> MovieInformations
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<MovieInformation>("MovieRentalSystemModel.FK_MovieInformation2", "MovieInformation");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<MovieInformation>("MovieRentalSystemModel.FK_MovieInformation2", "MovieInformation", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="MovieRentalSystemModel", Name="Language")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Language : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Language object.
        /// </summary>
        /// <param name="languageID">Initial value of the LanguageID property.</param>
        /// <param name="languageName">Initial value of the LanguageName property.</param>
        public static Language CreateLanguage(global::System.Int32 languageID, global::System.String languageName)
        {
            Language language = new Language();
            language.LanguageID = languageID;
            language.LanguageName = languageName;
            return language;
        }

        #endregion

        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 LanguageID
        {
            get
            {
                return _LanguageID;
            }
            set
            {
                if (_LanguageID != value)
                {
                    OnLanguageIDChanging(value);
                    ReportPropertyChanging("LanguageID");
                    _LanguageID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("LanguageID");
                    OnLanguageIDChanged();
                }
            }
        }
        private global::System.Int32 _LanguageID;
        partial void OnLanguageIDChanging(global::System.Int32 value);
        partial void OnLanguageIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String LanguageName
        {
            get
            {
                return _LanguageName;
            }
            set
            {
                OnLanguageNameChanging(value);
                ReportPropertyChanging("LanguageName");
                _LanguageName = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("LanguageName");
                OnLanguageNameChanged();
            }
        }
        private global::System.String _LanguageName;
        partial void OnLanguageNameChanging(global::System.String value);
        partial void OnLanguageNameChanged();

        #endregion

    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("MovieRentalSystemModel", "FK_MovieInformation1", "MovieInformation")]
        public EntityCollection<MovieInformation> MovieInformations
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<MovieInformation>("MovieRentalSystemModel.FK_MovieInformation1", "MovieInformation");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<MovieInformation>("MovieRentalSystemModel.FK_MovieInformation1", "MovieInformation", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="MovieRentalSystemModel", Name="MovieInformation")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class MovieInformation : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new MovieInformation object.
        /// </summary>
        /// <param name="movieID">Initial value of the MovieID property.</param>
        /// <param name="languageID">Initial value of the LanguageID property.</param>
        /// <param name="genreID">Initial value of the GenreID property.</param>
        /// <param name="movieName">Initial value of the MovieName property.</param>
        /// <param name="rating">Initial value of the Rating property.</param>
        /// <param name="price">Initial value of the Price property.</param>
        /// <param name="stock">Initial value of the Stock property.</param>
        /// <param name="description">Initial value of the Description property.</param>
        public static MovieInformation CreateMovieInformation(global::System.Int32 movieID, global::System.Int32 languageID, global::System.Int32 genreID, global::System.String movieName, global::System.Int32 rating, global::System.Double price, global::System.Int32 stock, global::System.String description)
        {
            MovieInformation movieInformation = new MovieInformation();
            movieInformation.MovieID = movieID;
            movieInformation.LanguageID = languageID;
            movieInformation.GenreID = genreID;
            movieInformation.MovieName = movieName;
            movieInformation.Rating = rating;
            movieInformation.Price = price;
            movieInformation.Stock = stock;
            movieInformation.Description = description;
            return movieInformation;
        }

        #endregion

        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 MovieID
        {
            get
            {
                return _MovieID;
            }
            set
            {
                if (_MovieID != value)
                {
                    OnMovieIDChanging(value);
                    ReportPropertyChanging("MovieID");
                    _MovieID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("MovieID");
                    OnMovieIDChanged();
                }
            }
        }
        private global::System.Int32 _MovieID;
        partial void OnMovieIDChanging(global::System.Int32 value);
        partial void OnMovieIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 LanguageID
        {
            get
            {
                return _LanguageID;
            }
            set
            {
                OnLanguageIDChanging(value);
                ReportPropertyChanging("LanguageID");
                _LanguageID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("LanguageID");
                OnLanguageIDChanged();
            }
        }
        private global::System.Int32 _LanguageID;
        partial void OnLanguageIDChanging(global::System.Int32 value);
        partial void OnLanguageIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 GenreID
        {
            get
            {
                return _GenreID;
            }
            set
            {
                OnGenreIDChanging(value);
                ReportPropertyChanging("GenreID");
                _GenreID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("GenreID");
                OnGenreIDChanged();
            }
        }
        private global::System.Int32 _GenreID;
        partial void OnGenreIDChanging(global::System.Int32 value);
        partial void OnGenreIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String MovieName
        {
            get
            {
                return _MovieName;
            }
            set
            {
                OnMovieNameChanging(value);
                ReportPropertyChanging("MovieName");
                _MovieName = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("MovieName");
                OnMovieNameChanged();
            }
        }
        private global::System.String _MovieName;
        partial void OnMovieNameChanging(global::System.String value);
        partial void OnMovieNameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Rating
        {
            get
            {
                return _Rating;
            }
            set
            {
                OnRatingChanging(value);
                ReportPropertyChanging("Rating");
                _Rating = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Rating");
                OnRatingChanged();
            }
        }
        private global::System.Int32 _Rating;
        partial void OnRatingChanging(global::System.Int32 value);
        partial void OnRatingChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Double Price
        {
            get
            {
                return _Price;
            }
            set
            {
                OnPriceChanging(value);
                ReportPropertyChanging("Price");
                _Price = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Price");
                OnPriceChanged();
            }
        }
        private global::System.Double _Price;
        partial void OnPriceChanging(global::System.Double value);
        partial void OnPriceChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Stock
        {
            get
            {
                return _Stock;
            }
            set
            {
                OnStockChanging(value);
                ReportPropertyChanging("Stock");
                _Stock = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Stock");
                OnStockChanged();
            }
        }
        private global::System.Int32 _Stock;
        partial void OnStockChanging(global::System.Int32 value);
        partial void OnStockChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Description
        {
            get
            {
                return _Description;
            }
            set
            {
                OnDescriptionChanging(value);
                ReportPropertyChanging("Description");
                _Description = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Description");
                OnDescriptionChanged();
            }
        }
        private global::System.String _Description;
        partial void OnDescriptionChanging(global::System.String value);
        partial void OnDescriptionChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Status
        {
            get
            {
                return _Status;
            }
            set
            {
                OnStatusChanging(value);
                ReportPropertyChanging("Status");
                _Status = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Status");
                OnStatusChanged();
            }
        }
        private global::System.String _Status;
        partial void OnStatusChanging(global::System.String value);
        partial void OnStatusChanged();

        #endregion

    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("MovieRentalSystemModel", "FK_MovieInformation2", "Genre")]
        public Genre Genre
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Genre>("MovieRentalSystemModel.FK_MovieInformation2", "Genre").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Genre>("MovieRentalSystemModel.FK_MovieInformation2", "Genre").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Genre> GenreReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Genre>("MovieRentalSystemModel.FK_MovieInformation2", "Genre");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Genre>("MovieRentalSystemModel.FK_MovieInformation2", "Genre", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("MovieRentalSystemModel", "FK_MovieInformation1", "Language")]
        public Language Language
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Language>("MovieRentalSystemModel.FK_MovieInformation1", "Language").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Language>("MovieRentalSystemModel.FK_MovieInformation1", "Language").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Language> LanguageReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Language>("MovieRentalSystemModel.FK_MovieInformation1", "Language");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Language>("MovieRentalSystemModel.FK_MovieInformation1", "Language", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("MovieRentalSystemModel", "FK_MovieTransact2", "MovieTransact")]
        public EntityCollection<MovieTransact> MovieTransacts
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<MovieTransact>("MovieRentalSystemModel.FK_MovieTransact2", "MovieTransact");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<MovieTransact>("MovieRentalSystemModel.FK_MovieTransact2", "MovieTransact", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="MovieRentalSystemModel", Name="MovieTransact")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class MovieTransact : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new MovieTransact object.
        /// </summary>
        /// <param name="requestID">Initial value of the RequestID property.</param>
        /// <param name="uID">Initial value of the UID property.</param>
        /// <param name="movieID">Initial value of the MovieID property.</param>
        /// <param name="requestDate">Initial value of the RequestDate property.</param>
        public static MovieTransact CreateMovieTransact(global::System.Int32 requestID, global::System.Int32 uID, global::System.Int32 movieID, global::System.DateTime requestDate)
        {
            MovieTransact movieTransact = new MovieTransact();
            movieTransact.RequestID = requestID;
            movieTransact.UID = uID;
            movieTransact.MovieID = movieID;
            movieTransact.RequestDate = requestDate;
            return movieTransact;
        }

        #endregion

        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 RequestID
        {
            get
            {
                return _RequestID;
            }
            set
            {
                if (_RequestID != value)
                {
                    OnRequestIDChanging(value);
                    ReportPropertyChanging("RequestID");
                    _RequestID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("RequestID");
                    OnRequestIDChanged();
                }
            }
        }
        private global::System.Int32 _RequestID;
        partial void OnRequestIDChanging(global::System.Int32 value);
        partial void OnRequestIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 UID
        {
            get
            {
                return _UID;
            }
            set
            {
                OnUIDChanging(value);
                ReportPropertyChanging("UID");
                _UID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("UID");
                OnUIDChanged();
            }
        }
        private global::System.Int32 _UID;
        partial void OnUIDChanging(global::System.Int32 value);
        partial void OnUIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 MovieID
        {
            get
            {
                return _MovieID;
            }
            set
            {
                OnMovieIDChanging(value);
                ReportPropertyChanging("MovieID");
                _MovieID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("MovieID");
                OnMovieIDChanged();
            }
        }
        private global::System.Int32 _MovieID;
        partial void OnMovieIDChanging(global::System.Int32 value);
        partial void OnMovieIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime RequestDate
        {
            get
            {
                return _RequestDate;
            }
            set
            {
                OnRequestDateChanging(value);
                ReportPropertyChanging("RequestDate");
                _RequestDate = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("RequestDate");
                OnRequestDateChanged();
            }
        }
        private global::System.DateTime _RequestDate;
        partial void OnRequestDateChanging(global::System.DateTime value);
        partial void OnRequestDateChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> IssueDate
        {
            get
            {
                return _IssueDate;
            }
            set
            {
                OnIssueDateChanging(value);
                ReportPropertyChanging("IssueDate");
                _IssueDate = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("IssueDate");
                OnIssueDateChanged();
            }
        }
        private Nullable<global::System.DateTime> _IssueDate;
        partial void OnIssueDateChanging(Nullable<global::System.DateTime> value);
        partial void OnIssueDateChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> ReturnDate
        {
            get
            {
                return _ReturnDate;
            }
            set
            {
                OnReturnDateChanging(value);
                ReportPropertyChanging("ReturnDate");
                _ReturnDate = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("ReturnDate");
                OnReturnDateChanged();
            }
        }
        private Nullable<global::System.DateTime> _ReturnDate;
        partial void OnReturnDateChanging(Nullable<global::System.DateTime> value);
        partial void OnReturnDateChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Status
        {
            get
            {
                return _Status;
            }
            set
            {
                OnStatusChanging(value);
                ReportPropertyChanging("Status");
                _Status = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Status");
                OnStatusChanged();
            }
        }
        private global::System.String _Status;
        partial void OnStatusChanging(global::System.String value);
        partial void OnStatusChanged();

        #endregion

    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("MovieRentalSystemModel", "FK_MovieTransact2", "MovieInformation")]
        public MovieInformation MovieInformation
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<MovieInformation>("MovieRentalSystemModel.FK_MovieTransact2", "MovieInformation").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<MovieInformation>("MovieRentalSystemModel.FK_MovieTransact2", "MovieInformation").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<MovieInformation> MovieInformationReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<MovieInformation>("MovieRentalSystemModel.FK_MovieTransact2", "MovieInformation");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<MovieInformation>("MovieRentalSystemModel.FK_MovieTransact2", "MovieInformation", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("MovieRentalSystemModel", "FK_MovieTransact1", "User")]
        public User User
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<User>("MovieRentalSystemModel.FK_MovieTransact1", "User").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<User>("MovieRentalSystemModel.FK_MovieTransact1", "User").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<User> UserReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<User>("MovieRentalSystemModel.FK_MovieTransact1", "User");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<User>("MovieRentalSystemModel.FK_MovieTransact1", "User", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="MovieRentalSystemModel", Name="Role")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Role : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Role object.
        /// </summary>
        /// <param name="roleID">Initial value of the RoleID property.</param>
        /// <param name="roleName">Initial value of the RoleName property.</param>
        public static Role CreateRole(global::System.Int32 roleID, global::System.String roleName)
        {
            Role role = new Role();
            role.RoleID = roleID;
            role.RoleName = roleName;
            return role;
        }

        #endregion

        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 RoleID
        {
            get
            {
                return _RoleID;
            }
            set
            {
                if (_RoleID != value)
                {
                    OnRoleIDChanging(value);
                    ReportPropertyChanging("RoleID");
                    _RoleID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("RoleID");
                    OnRoleIDChanged();
                }
            }
        }
        private global::System.Int32 _RoleID;
        partial void OnRoleIDChanging(global::System.Int32 value);
        partial void OnRoleIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String RoleName
        {
            get
            {
                return _RoleName;
            }
            set
            {
                OnRoleNameChanging(value);
                ReportPropertyChanging("RoleName");
                _RoleName = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("RoleName");
                OnRoleNameChanged();
            }
        }
        private global::System.String _RoleName;
        partial void OnRoleNameChanging(global::System.String value);
        partial void OnRoleNameChanged();

        #endregion

    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("MovieRentalSystemModel", "FK_User1", "User")]
        public EntityCollection<User> Users
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<User>("MovieRentalSystemModel.FK_User1", "User");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<User>("MovieRentalSystemModel.FK_User1", "User", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="MovieRentalSystemModel", Name="sysdiagram")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class sysdiagram : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new sysdiagram object.
        /// </summary>
        /// <param name="name">Initial value of the name property.</param>
        /// <param name="principal_id">Initial value of the principal_id property.</param>
        /// <param name="diagram_id">Initial value of the diagram_id property.</param>
        public static sysdiagram Createsysdiagram(global::System.String name, global::System.Int32 principal_id, global::System.Int32 diagram_id)
        {
            sysdiagram sysdiagram = new sysdiagram();
            sysdiagram.name = name;
            sysdiagram.principal_id = principal_id;
            sysdiagram.diagram_id = diagram_id;
            return sysdiagram;
        }

        #endregion

        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String name
        {
            get
            {
                return _name;
            }
            set
            {
                OnnameChanging(value);
                ReportPropertyChanging("name");
                _name = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("name");
                OnnameChanged();
            }
        }
        private global::System.String _name;
        partial void OnnameChanging(global::System.String value);
        partial void OnnameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 principal_id
        {
            get
            {
                return _principal_id;
            }
            set
            {
                Onprincipal_idChanging(value);
                ReportPropertyChanging("principal_id");
                _principal_id = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("principal_id");
                Onprincipal_idChanged();
            }
        }
        private global::System.Int32 _principal_id;
        partial void Onprincipal_idChanging(global::System.Int32 value);
        partial void Onprincipal_idChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 diagram_id
        {
            get
            {
                return _diagram_id;
            }
            set
            {
                if (_diagram_id != value)
                {
                    Ondiagram_idChanging(value);
                    ReportPropertyChanging("diagram_id");
                    _diagram_id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("diagram_id");
                    Ondiagram_idChanged();
                }
            }
        }
        private global::System.Int32 _diagram_id;
        partial void Ondiagram_idChanging(global::System.Int32 value);
        partial void Ondiagram_idChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> version
        {
            get
            {
                return _version;
            }
            set
            {
                OnversionChanging(value);
                ReportPropertyChanging("version");
                _version = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("version");
                OnversionChanged();
            }
        }
        private Nullable<global::System.Int32> _version;
        partial void OnversionChanging(Nullable<global::System.Int32> value);
        partial void OnversionChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.Byte[] definition
        {
            get
            {
                return StructuralObject.GetValidValue(_definition);
            }
            set
            {
                OndefinitionChanging(value);
                ReportPropertyChanging("definition");
                _definition = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("definition");
                OndefinitionChanged();
            }
        }
        private global::System.Byte[] _definition;
        partial void OndefinitionChanging(global::System.Byte[] value);
        partial void OndefinitionChanged();

        #endregion

    
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="MovieRentalSystemModel", Name="User")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class User : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new User object.
        /// </summary>
        /// <param name="uID">Initial value of the UID property.</param>
        /// <param name="roleID">Initial value of the RoleID property.</param>
        /// <param name="name">Initial value of the Name property.</param>
        /// <param name="userName">Initial value of the UserName property.</param>
        /// <param name="password">Initial value of the Password property.</param>
        /// <param name="phone">Initial value of the Phone property.</param>
        /// <param name="email">Initial value of the Email property.</param>
        /// <param name="address">Initial value of the Address property.</param>
        public static User CreateUser(global::System.Int32 uID, global::System.Int32 roleID, global::System.String name, global::System.String userName, global::System.String password, global::System.String phone, global::System.String email, global::System.String address)
        {
            User user = new User();
            user.UID = uID;
            user.RoleID = roleID;
            user.Name = name;
            user.UserName = userName;
            user.Password = password;
            user.Phone = phone;
            user.Email = email;
            user.Address = address;
            return user;
        }

        #endregion

        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 UID
        {
            get
            {
                return _UID;
            }
            set
            {
                if (_UID != value)
                {
                    OnUIDChanging(value);
                    ReportPropertyChanging("UID");
                    _UID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("UID");
                    OnUIDChanged();
                }
            }
        }
        private global::System.Int32 _UID;
        partial void OnUIDChanging(global::System.Int32 value);
        partial void OnUIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 RoleID
        {
            get
            {
                return _RoleID;
            }
            set
            {
                OnRoleIDChanging(value);
                ReportPropertyChanging("RoleID");
                _RoleID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("RoleID");
                OnRoleIDChanged();
            }
        }
        private global::System.Int32 _RoleID;
        partial void OnRoleIDChanging(global::System.Int32 value);
        partial void OnRoleIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String UserName
        {
            get
            {
                return _UserName;
            }
            set
            {
                OnUserNameChanging(value);
                ReportPropertyChanging("UserName");
                _UserName = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("UserName");
                OnUserNameChanged();
            }
        }
        private global::System.String _UserName;
        partial void OnUserNameChanging(global::System.String value);
        partial void OnUserNameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Password
        {
            get
            {
                return _Password;
            }
            set
            {
                OnPasswordChanging(value);
                ReportPropertyChanging("Password");
                _Password = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Password");
                OnPasswordChanged();
            }
        }
        private global::System.String _Password;
        partial void OnPasswordChanging(global::System.String value);
        partial void OnPasswordChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Phone
        {
            get
            {
                return _Phone;
            }
            set
            {
                OnPhoneChanging(value);
                ReportPropertyChanging("Phone");
                _Phone = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Phone");
                OnPhoneChanged();
            }
        }
        private global::System.String _Phone;
        partial void OnPhoneChanging(global::System.String value);
        partial void OnPhoneChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Email
        {
            get
            {
                return _Email;
            }
            set
            {
                OnEmailChanging(value);
                ReportPropertyChanging("Email");
                _Email = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Email");
                OnEmailChanged();
            }
        }
        private global::System.String _Email;
        partial void OnEmailChanging(global::System.String value);
        partial void OnEmailChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Address
        {
            get
            {
                return _Address;
            }
            set
            {
                OnAddressChanging(value);
                ReportPropertyChanging("Address");
                _Address = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Address");
                OnAddressChanged();
            }
        }
        private global::System.String _Address;
        partial void OnAddressChanging(global::System.String value);
        partial void OnAddressChanged();

        #endregion

    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("MovieRentalSystemModel", "FK_MovieTransact1", "MovieTransact")]
        public EntityCollection<MovieTransact> MovieTransacts
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<MovieTransact>("MovieRentalSystemModel.FK_MovieTransact1", "MovieTransact");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<MovieTransact>("MovieRentalSystemModel.FK_MovieTransact1", "MovieTransact", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("MovieRentalSystemModel", "FK_User1", "Role")]
        public Role Role
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Role>("MovieRentalSystemModel.FK_User1", "Role").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Role>("MovieRentalSystemModel.FK_User1", "Role").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Role> RoleReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Role>("MovieRentalSystemModel.FK_User1", "Role");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Role>("MovieRentalSystemModel.FK_User1", "Role", value);
                }
            }
        }

        #endregion

    }

    #endregion

    #region ComplexTypes
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmComplexTypeAttribute(NamespaceName="MovieRentalSystemModel", Name="spTopTen_Result")]
    [DataContractAttribute(IsReference=true)]
    [Serializable()]
    public partial class spTopTen_Result : ComplexObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new spTopTen_Result object.
        /// </summary>
        /// <param name="movieName">Initial value of the MovieName property.</param>
        /// <param name="rating">Initial value of the Rating property.</param>
        public static spTopTen_Result CreatespTopTen_Result(global::System.String movieName, global::System.Int32 rating)
        {
            spTopTen_Result spTopTen_Result = new spTopTen_Result();
            spTopTen_Result.MovieName = movieName;
            spTopTen_Result.Rating = rating;
            return spTopTen_Result;
        }

        #endregion

        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String MovieName
        {
            get
            {
                return _MovieName;
            }
            set
            {
                OnMovieNameChanging(value);
                ReportPropertyChanging("MovieName");
                _MovieName = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("MovieName");
                OnMovieNameChanged();
            }
        }
        private global::System.String _MovieName;
        partial void OnMovieNameChanging(global::System.String value);
        partial void OnMovieNameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Rating
        {
            get
            {
                return _Rating;
            }
            set
            {
                OnRatingChanging(value);
                ReportPropertyChanging("Rating");
                _Rating = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Rating");
                OnRatingChanged();
            }
        }
        private global::System.Int32 _Rating;
        partial void OnRatingChanging(global::System.Int32 value);
        partial void OnRatingChanged();

        #endregion

    }

    #endregion

    
}
